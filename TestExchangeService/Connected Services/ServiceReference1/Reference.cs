//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderData", Namespace="http://schemas.datacontract.org/2004/07/AbacasX.Exchange.Contracts")]
    public partial class OrderData : object
    {
        
        private int BuySellTypeField;
        
        private int ClientAccountIdField;
        
        private int ClientIdField;
        
        private int OrderIdField;
        
        private decimal OrderPriceField;
        
        private int OrderPriceTermsField;
        
        private int OrderTypeField;
        
        private decimal Token1AmountField;
        
        private string Token1IdField;
        
        private decimal Token2AmountField;
        
        private string Token2IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BuySellType
        {
            get
            {
                return this.BuySellTypeField;
            }
            set
            {
                this.BuySellTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientAccountId
        {
            get
            {
                return this.ClientAccountIdField;
            }
            set
            {
                this.ClientAccountIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientId
        {
            get
            {
                return this.ClientIdField;
            }
            set
            {
                this.ClientIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderId
        {
            get
            {
                return this.OrderIdField;
            }
            set
            {
                this.OrderIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal OrderPrice
        {
            get
            {
                return this.OrderPriceField;
            }
            set
            {
                this.OrderPriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderPriceTerms
        {
            get
            {
                return this.OrderPriceTermsField;
            }
            set
            {
                this.OrderPriceTermsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderType
        {
            get
            {
                return this.OrderTypeField;
            }
            set
            {
                this.OrderTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Token1Amount
        {
            get
            {
                return this.Token1AmountField;
            }
            set
            {
                this.Token1AmountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token1Id
        {
            get
            {
                return this.Token1IdField;
            }
            set
            {
                this.Token1IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Token2Amount
        {
            get
            {
                return this.Token2AmountField;
            }
            set
            {
                this.Token2AmountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token2Id
        {
            get
            {
                return this.Token2IdField;
            }
            set
            {
                this.Token2IdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IOrderService", CallbackContract=typeof(ServiceReference1.IOrderServiceCallback))]
    public interface IOrderService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddOrder", ReplyAction="http://tempuri.org/IOrderService/AddOrderResponse")]
        System.Threading.Tasks.Task<int> AddOrderAsync(ServiceReference1.OrderData orderData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/SuspendOrder", ReplyAction="http://tempuri.org/IOrderService/SuspendOrderResponse")]
        System.Threading.Tasks.Task<int> SuspendOrderAsync(int OrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/CancelOrder", ReplyAction="http://tempuri.org/IOrderService/CancelOrderResponse")]
        System.Threading.Tasks.Task<int> CancelOrderAsync(int OrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/ActivateOrder", ReplyAction="http://tempuri.org/IOrderService/ActivateOrderResponse")]
        System.Threading.Tasks.Task<int> ActivateOrderAsync(int OrderID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface IOrderServiceCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOrderService/OrderAdded")]
        void OrderAdded(ServiceReference1.OrderData orderData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface IOrderServiceChannel : ServiceReference1.IOrderService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class OrderServiceClientBase : System.ServiceModel.DuplexClientBase<ServiceReference1.IOrderService>, ServiceReference1.IOrderService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public OrderServiceClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, OrderServiceClientBase.GetDefaultBinding(), OrderServiceClientBase.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.tcpOM.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OrderServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, OrderServiceClientBase.GetBindingForEndpoint(endpointConfiguration), OrderServiceClientBase.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OrderServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, OrderServiceClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OrderServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, OrderServiceClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OrderServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> AddOrderAsync(ServiceReference1.OrderData orderData)
        {
            return base.Channel.AddOrderAsync(orderData);
        }
        
        public System.Threading.Tasks.Task<int> SuspendOrderAsync(int OrderID)
        {
            return base.Channel.SuspendOrderAsync(OrderID);
        }
        
        public System.Threading.Tasks.Task<int> CancelOrderAsync(int OrderID)
        {
            return base.Channel.CancelOrderAsync(OrderID);
        }
        
        public System.Threading.Tasks.Task<int> ActivateOrderAsync(int OrderID)
        {
            return base.Channel.ActivateOrderAsync(OrderID);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.tcpOM))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.tcpOM))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8085/OrderManager");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return OrderServiceClientBase.GetBindingForEndpoint(EndpointConfiguration.tcpOM);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return OrderServiceClientBase.GetEndpointAddress(EndpointConfiguration.tcpOM);
        }
        
        public enum EndpointConfiguration
        {
            
            tcpOM,
        }
    }
    
    public class OrderAddedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public OrderAddedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public ServiceReference1.OrderData orderData
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((ServiceReference1.OrderData)(this.results[0]));
            }
        }
    }
    
    public partial class OrderServiceClient : OrderServiceClientBase
    {
        
        public OrderServiceClient(EndpointConfiguration endpointConfiguration) : 
                this(new OrderServiceClientCallback(), endpointConfiguration)
        {
        }
        
        private OrderServiceClient(OrderServiceClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration)
        {
            callbackImpl.Initialize(this);
        }
        
        public OrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new OrderServiceClientCallback(), binding, remoteAddress)
        {
        }
        
        private OrderServiceClient(OrderServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            callbackImpl.Initialize(this);
        }
        
        public OrderServiceClient() : 
                this(new OrderServiceClientCallback())
        {
        }
        
        private OrderServiceClient(OrderServiceClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl))
        {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<OrderAddedReceivedEventArgs> OrderAddedReceived;
        
        private void OnOrderAddedReceived(object state)
        {
            if ((this.OrderAddedReceived != null))
            {
                object[] results = ((object[])(state));
                this.OrderAddedReceived(this, new OrderAddedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class OrderServiceClientCallback : object, IOrderServiceCallback
        {
            
            private OrderServiceClient proxy;
            
            public void Initialize(OrderServiceClient proxy)
            {
                this.proxy = proxy;
            }
            
            public void OrderAdded(ServiceReference1.OrderData orderData)
            {
                this.proxy.OnOrderAddedReceived(new object[] {
                            orderData});
            }
        }
    }
}
